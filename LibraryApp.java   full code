import java.io.*;
import java.util.*;
import java.util.regex.Pattern;

/**
 * Library Management Application (Console Based)
 *
 * Features:
 * - Add, Delete, View, Borrow, Return Books
 * - View My Borrowed Book
 * - Search books by title
 * - Check available books in selected field
 * - Validate student admission number (GUYYYYNNNNN)
 * - Restrict borrowing to student‚Äôs field
 * - Persistent file storage (books.txt)
 * - Input validations
 * - User-friendly prompts & emojis
 * - Layered structure simulated via modular methods
 */

public class LibraryApp {

    // File to store book data
    private static final String FILE_NAME = "books.txt";

    // Scanner for user input
    private static final Scanner sc = new Scanner(System.in);

    // List of books in library
    private static List<Book> books = new ArrayList<>();

    // Track borrowed books per student (Map<admissionNo, bookId>)
    private static Map<String, Integer> borrowedMap = new HashMap<>();

    // === Base Book class ===
    static class Book {
        protected int id;
        protected String title;
        protected String author;
        protected boolean isAvailable;
        protected String field;
        protected String borrowedBy;

        public Book(int id, String title, String author, boolean isAvailable, String field) {
            this.id = id;
            this.title = title;
            this.author = author;
            this.isAvailable = isAvailable;
            this.field = field;
            this.borrowedBy = null;
        }

        public int getId() { return id; }
        public String getTitle() { return title; }
        public boolean isAvailable() { return isAvailable; }
        public String getField() { return field; }
        public String getBorrowedBy() { return borrowedBy; }
        public void setAvailable(boolean available) { this.isAvailable = available; }
        public void setBorrowedBy(String admNo) { this.borrowedBy = admNo; }

        // Converts book object to CSV line for file storage
        public String toFileString() {
            return id + "," + title + "," + author + "," + isAvailable + "," + field + "," + (borrowedBy == null ? "" : borrowedBy);
        }

        @Override
        public String toString() {
            return "[" + id + "] üìö " + title + " by " + author + " - " + field + " - " +
                   (isAvailable ? "‚úÖ Available" : "‚ùå Borrowed by " + borrowedBy);
        }
    }

    // === Main Program Entry Point ===
    public static void main(String[] args) {

        // Display welcome message
        System.out.println("=============================================");
        System.out.println("  üìö Welcome to the Library Management Console!  ");
        System.out.println("=============================================");

        loadBooks();  // Load books from file on startup

        // Main menu loop
        while (true) {
            try {
                // Display main menu
                System.out.println("\n=== üìñ Library Menu ===");
                System.out.println("1Ô∏è‚É£ View All Books");
                System.out.println("2Ô∏è‚É£ Add Book");
                System.out.println("3Ô∏è‚É£ Delete Book");
                System.out.println("4Ô∏è‚É£ Borrow Book");
                System.out.println("5Ô∏è‚É£ Return Book");
                System.out.println("6Ô∏è‚É£ Search Book by Title");
                System.out.println("7Ô∏è‚É£ View My Borrowed Book");
                System.out.println("8Ô∏è‚É£ Exit");
                System.out.print("üëâ Enter choice (1-8): ");

                String choice = sc.nextLine().trim();

                switch (choice) {
                    case "1": viewBooks(); break;
                    case "2": addBookMenu(); break;
                    case "3": deleteBookMenu(); break;
                    case "4": borrowBook(); break;
                    case "5": returnBook(); break;
                    case "6": searchBookByTitle(); break;
                    case "7": viewMyBorrowedBook(); break;
                    case "8":
                        saveBooks();
                        System.out.println("\nüôè Thank you for using Library Management App! üëã");
                        System.out.println("=============================================");
                        System.exit(0);
                        break;
                    default:
                        System.out.println("‚ö† Invalid choice. Please enter a valid option (1-8).");
                }

            } catch (Exception e) {
                System.out.println("‚ùó An unexpected error occurred: " + e.getMessage());
            }
        }
    }

    // === Load books from books.txt ===
    private static void loadBooks() {
        File file = new File(FILE_NAME);
        if (!file.exists()) {
            createSampleBooks();
            saveBooks();
        }

        books.clear();
        borrowedMap.clear();

        try (BufferedReader br = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(",", -1);

                // Validate line length
                if (parts.length < 6) {
                    System.out.println("‚ö† Skipping invalid line in file: " + line);
                    continue;
                }

                try {
                    int id = Integer.parseInt(parts[0].trim());
                    String title = parts[1].trim();
                    String author = parts[2].trim();
                    boolean isAvailable = Boolean.parseBoolean(parts[3].trim());
                    String field = parts[4].trim();
                    String borrowedBy = parts[5].isEmpty() ? null : parts[5].trim();

                    Book b = new Book(id, title, author, isAvailable, field);
                    b.setBorrowedBy(borrowedBy);
                    books.add(b);

                    if (borrowedBy != null && !borrowedBy.isEmpty()) {
                        borrowedMap.put(borrowedBy, id);
                    }

                } catch (NumberFormatException e) {
                    System.out.println("‚ö† Skipping invalid line (ID error): " + line);
                } catch (Exception e) {
                    System.out.println("‚ö† Skipping invalid line (General error): " + line);
                }
            }
        } catch (IOException e) {
            System.out.println("‚ùó Error reading file: " + e.getMessage());
        }
    }

    // === Save books to books.txt ===
    private static void saveBooks() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Book b : books) {
                bw.write(b.toFileString());
                bw.newLine();
            }
        } catch (IOException e) {
            System.out.println("‚ùó Error saving file: " + e.getMessage());
        }
    }

    // === Create initial sample books ===
    private static void createSampleBooks() {
        books.clear();
        books.add(new Book(1, "Forensic Science Handbook", "James Robertson", true, "Forensic"));
        books.add(new Book(2, "Crime Scene Investigation", "Arlene Weisz", true, "Forensic"));
        books.add(new Book(3, "Introduction to Forensic Science", "Richard Saferstein", true, "Forensic"));
        books.add(new Book(4, "Law of Torts", "R.K. Bangia", true, "Law"));
        books.add(new Book(5, "Legal Language", "Madhavi Divan", true, "Law"));
        books.add(new Book(6, "Indian Contract Act", "Avtar Singh", true, "Law"));
        books.add(new Book(7, "Let Us C", "Yashavant Kanetkar", true, "Programming"));
        books.add(new Book(8, "Java: The Complete Reference", "Herbert Schildt", true, "Programming"));
        books.add(new Book(9, "Head First Python", "Paul Barry", true, "Programming"));
        books.add(new Book(10, "Calculus", "James Stewart", true, "Maths"));
        books.add(new Book(11, "Discrete Mathematics", "Kenneth H. Rosen", true, "Maths"));
        books.add(new Book(12, "Linear Algebra", "Gilbert Strang", true, "Maths"));
        books.add(new Book(13, "Operating System Concepts", "Silberschatz", true, "Engineering"));
        books.add(new Book(14, "Computer Networking", "Kurose & Ross", true, "Engineering"));
        books.add(new Book(15, "Digital Logic Design", "Morris Mano", true, "Engineering"));
        books.add(new Book(16, "Fundamentals of Nursing", "Barbara Kozier", true, "Nursing"));
        books.add(new Book(17, "Community Health Nursing", "B.T. Basavanthappa", true, "Nursing"));
        books.add(new Book(18, "Essentials of Pediatric Nursing", "Jaypee", true, "Nursing"));
        books.add(new Book(19, "Principles of Marketing", "Philip Kotler", true, "Commerce"));
        books.add(new Book(20, "Financial Accounting", "T.S. Grewal", true, "Commerce"));
        books.add(new Book(21, "Business Law", "M.C. Kuchhal", true, "Commerce"));
    }

    // === View All Books ===
    private static void viewBooks() {
        System.out.println("\n--- üìö Library Books ---");
        if (books.isEmpty()) {
            System.out.println("üòî No books available.");
            return;
        }
        for (Book b : books) {
            System.out.println(b);
        }
    }

    // === Add New Book ===
    private static void addBookMenu() {
        try {
            System.out.print("Enter new book ID (number): ");
            int id = Integer.parseInt(sc.nextLine().trim());
            if (findBookById(id) != null) {
                System.out.println("‚ö† Book ID already exists.");
                return;
            }

            System.out.print("Enter book title: ");
            String title = sc.nextLine().trim();
            if (title.isEmpty()) {
                System.out.println("‚ö† Title cannot be empty.");
                return;
            }

            System.out.print("Enter author name: ");
            String author = sc.nextLine().trim();
            if (author.isEmpty()) {
                System.out.println("‚ö† Author cannot be empty.");
                return;
            }

            String field = selectField();
            if (field == null) return;

            Book newBook = new Book(id, title, author, true, field);
            books.add(newBook);
            saveBooks();
            System.out.println("‚úÖ Book added successfully.");

        } catch (NumberFormatException e) {
            System.out.println("‚ö† Invalid input. ID must be a number.");
        }
    }

    // === Select Field Menu ===
    private static String selectField() {
        System.out.println("\nSelect field/category of the book:");
        System.out.println("1. Forensic");
        System.out.println("2. Law");
        System.out.println("3. Programming");
        System.out.println("4. Maths");
        System.out.println("5. Engineering");
        System.out.println("6. Nursing");
        System.out.println("7. Commerce");
        System.out.print("üëâ Enter choice (1-7): ");
        String fieldChoice = sc.nextLine().trim();

        switch (fieldChoice) {
            case "1": return "Forensic";
            case "2": return "Law";
            case "3": return "Programming";
            case "4": return "Maths";
            case "5": return "Engineering";
            case "6": return "Nursing";
            case "7": return "Commerce";
            default:
                System.out.println("‚ö† Invalid field choice.");
                return null;
        }
    }

    // === Delete Book ===
    private static void deleteBookMenu() {
        try {
            System.out.print("Enter book ID to delete: ");
            int id = Integer.parseInt(sc.nextLine().trim());
            Book b = findBookById(id);
            if (b == null) {
                System.out.println("‚ö† No book found with that ID.");
                return;
            }
            if (!b.isAvailable()) {
                System.out.println("‚ö† Cannot delete. Book is currently borrowed.");
                return;
            }
            books.remove(b);
            saveBooks();
            System.out.println("‚úÖ Book deleted successfully.");
        } catch (NumberFormatException e) {
            System.out.println("‚ö† Invalid input. ID must be a number.");
        }
    }

    // === Borrow Book ===
    private static void borrowBook() {
        System.out.print("Enter your admission number (Format: GUYYYYNNNNN): ");
        String admNo = sc.nextLine().trim();
        if (!Pattern.matches("GU\\d{4}\\d{5}", admNo)) {
            System.out.println("‚ö† Invalid admission number format.");
            return;
        }

        if (borrowedMap.containsKey(admNo)) {
            System.out.println("‚ö† You have already borrowed a book.");
            return;
        }

        String field = selectField();
        if (field == null) return;

        System.out.println("\nAvailable books in " + field + ":");
        List<Book> fieldBooks = new ArrayList<>();
        for (Book b : books) {
            if (b.getField().equalsIgnoreCase(field) && b.isAvailable()) {
                fieldBooks.add(b);
                System.out.println(b);
            }
        }

        if (fieldBooks.isEmpty()) {
            System.out.println("üòî No available books in this field.");
            return;
        }

        try {
            System.out.print("Enter book ID to borrow: ");
            int bookId = Integer.parseInt(sc.nextLine().trim());
            Book b = findBookById(bookId);
            if (b == null || !b.getField().equalsIgnoreCase(field)) {
                System.out.println("‚ö† Invalid book ID for selected field.");
                return;
            }
            if (!b.isAvailable()) {
                System.out.println("‚ö† Book is currently borrowed.");
                return;
            }

            b.setAvailable(false);
            b.setBorrowedBy(admNo);
            borrowedMap.put(admNo, bookId);
            saveBooks();
            System.out.println("‚úÖ Book borrowed successfully: " + b.getTitle());
        } catch (NumberFormatException e) {
            System.out.println("‚ö† Invalid input. Book ID must be a number.");
        }
    }

    // === Return Book ===
    private static void returnBook() {
        System.out.print("Enter your admission number (Format: GUYYYYNNNNN): ");
        String admNo = sc.nextLine().trim();
        if (!Pattern.matches("GU\\d{4}\\d{5}", admNo)) {
            System.out.println("‚ö† Invalid admission number format.");
            return;
        }

        if (!borrowedMap.containsKey(admNo)) {
            System.out.println("‚ö† You have not borrowed any book.");
            return;
        }

        int bookId = borrowedMap.get(admNo);
        Book borrowedBook = findBookById(bookId);
        if (borrowedBook == null) {
            System.out.println("‚ö† Borrowed book record not found.");
            borrowedMap.remove(admNo);
            return;
        }

        borrowedBook.setAvailable(true);
        borrowedBook.setBorrowedBy(null);
        borrowedMap.remove(admNo);
        saveBooks();
        System.out.println("‚úÖ You have returned: " + borrowedBook.getTitle());
    }

    // === Search Book by Title ===
    private static void searchBookByTitle() {
        System.out.print("Enter book title or keyword to search: ");
        String keyword = sc.nextLine().trim().toLowerCase();

        boolean found = false;
        for (Book b : books) {
            if (b.getTitle().toLowerCase().contains(keyword)) {
                System.out.println(b);
                found = true;
            }
        }
        if (!found) {
            System.out.println("üòî No books found matching: " + keyword);
        }
    }

    // === View My Borrowed Book ===
    private static void viewMyBorrowedBook() {
        System.out.print("Enter your admission number (Format: GUYYYYNNNNN): ");
        String admNo = sc.nextLine().trim();
        if (!Pattern.matches("GU\\d{4}\\d{5}", admNo)) {
            System.out.println("‚ö† Invalid admission number format.");
            return;
        }

        if (!borrowedMap.containsKey(admNo)) {
            System.out.println("‚ö† You have not borrowed any book.");
            return;
        }

        int bookId = borrowedMap.get(admNo);
        Book b = findBookById(bookId);
        if (b != null) {
            System.out.println("üìñ You have borrowed: " + b);
        } else {
            System.out.println("‚ö† Borrowed book record not found.");
        }
    }

    // === Find Book by ID ===
    private static Book findBookById(int id) {
        for (Book b : books) {
            if (b.getId() == id) {
                return b;
            }
        }
        return null;
    }
}
